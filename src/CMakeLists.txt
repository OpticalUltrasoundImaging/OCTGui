set(EXE_NAME OCTGui)

find_package(fmt CONFIG REQUIRED)
find_package(FFTW3 CONFIG REQUIRED)
find_package(FFTW3f CONFIG REQUIRED)
find_package(OpenCV CONFIG REQUIRED)
find_package(TBB CONFIG REQUIRED)
find_package(Qt6 CONFIG REQUIRED COMPONENTS Widgets Gui SerialPort)
qt_standard_project_setup()
set(CMAKE_AUTOMOC ON)

# Manually include QCustomPlot
find_path(QCUSTOMPLOT_INCLUDE_DIR qcustomplot.h PATH_SUFFIXES qcustomplot)
if (WIN32)
    find_library(QCUSTOMPLOT_LIBRARY NAMES qcustomplot2)
    find_library(QCUSTOMPLOT_LIBRARY_DEBUG NAMES qcustomplotd2)

    set(QCUSTOMPLOT_LIBRARY "$<IF:$<CONFIG:Debug>,${QCUSTOMPLOT_LIBRARY_DEBUG},${QCUSTOMPLOT_LIBRARY}>")
else ()
    find_library(QCUSTOMPLOT_LIBRARY NAMES qcustomplot)
endif()

if (QCUSTOMPLOT_INCLUDE_DIR AND QCUSTOMPLOT_LIBRARY)
    message(STATUS "Found QCustomPlot: ${QCUSTOMPLOT_LIBRARY}")
else()
    message(FATAL_ERROR "Could not find QCustomPlot")
endif()

# Use QCustomPlot as a shared library
add_definitions(-DQCUSTOMPLOT_USE_LIBRARY)


### Icons
# https://doc.qt.io/qt-6/appicon.html
# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
set(MACOSX_BUNDLE_ICON_FILE OCTGui.icns)
set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/OCTGui.icns")
set_source_files_properties(${app_icon_macos} PROPERTIES 
    MACOSX_PACKAGE_LOCATION "Resources")
set(app_icon_windows "${CMAKE_CURRENT_SOURCE_DIR}/resources/icons/OCTGui.rc")

qt_add_executable(${EXE_NAME}
    main.cpp
    MainWindow.hpp
    MainWindow.cpp
    FileIO.hpp
    ImageDisplay.hpp
    ReconWorker.hpp
    FrameController.hpp
    ExportSettings.hpp
    Overlay.hpp
    OCTReconParamsController.hpp
    AcquisitionController.hpp
    AcquisitionController.cpp
    MotorDriver.hpp
    ${app_icon_macos}
    ${app_icon_windows}
)

target_sources(${EXE_NAME} PRIVATE
    DAQ.cpp
)

set_target_properties(${EXE_NAME} PROPERTIES 
    CXX_STANDARD 20
    CXX_EXTENSIONS OFF
)

target_compile_definitions(${EXE_NAME} PRIVATE -DQT_NO_KEYWORDS)

target_include_directories(${EXE_NAME} PRIVATE
  ${OpenCV_INCLUDE_DIRS}
)

target_link_libraries(${EXE_NAME} PRIVATE
    fmt::fmt
    Qt::Widgets
    Qt::Gui
    Qt::SerialPort
    ${QCUSTOMPLOT_LIBRARY}
    opencv_world
    FFTW3::fftw3
    FFTW3::fftw3f
    TBB::tbb
    TBB::tbbmalloc
)

### Configure AlazarTech ATS-SDK
if (WIN32)
    # Check if ATS-SDK is installed
    set(ATS_C_SDK_ROOT "C:/AlazarTech/ATS-SDK/7.7.0/Samples_C")
    set(ATS_SDK_INCLUDE_DIR "${ATS_C_SDK_ROOT}/Include")
    set(ATS_SDK_LIB "${ATS_C_SDK_ROOT}/Library/x64/ATSApi.lib")

    if (EXISTS ${ATS_SDK_LIB})
        message(STATUS "Found ATS-SDK at ${ATS_C_SDK_ROOT}. OCTGui will build with AlazarTech DAQ support.")

        target_compile_definitions(${EXE_NAME} PRIVATE OCTGUI_HAS_ALAZAR)
        target_include_directories(${EXE_NAME} PRIVATE ${ATS_SDK_INCLUDE_DIR})
        target_link_libraries(${EXE_NAME} PRIVATE ${ATS_SDK_LIB})
    else()
        message(WARNING "ATS-SDK not found at ${ATS_C_SDK_ROOT}. Please check your ATS-SDK installation.")
    endif()
endif()



### Run Qt deploy script
if (WIN32)
    add_compile_definitions(_USE_MATH_DEFINES)

    # On Windows, call windeployqt create a deployable folder
    # https://doc.qt.io/qt-6/windows-deployment.html
    set_target_properties(${EXE_NAME} PROPERTIES
        WIN32_EXECUTABLE ON
    )

    # Determine the path to windeployqt
    set(WINDEPLOYQT_PATH "${Qt6_DIR}/../../tools/Qt6/bin")
    set(WINDEPLOYQT_EXE "${WINDEPLOYQT_PATH}/windeployqt.exe")
    set(WINDEPLOYQT_DEBUG_EXE "${WINDEPLOYQT_PATH}/windeployqt.debug.bat")

    # Add post build command to call windeployqt
    add_custom_command(TARGET ${EXE_NAME} POST_BUILD
        COMMAND "$<IF:$<CONFIG:Debug>,${WINDEPLOYQT_DEBUG_EXE},${WINDEPLOYQT_EXE}>"
        --verbose 1
        "$<TARGET_FILE:${EXE_NAME}>"
    )

elseif (APPLE)

    # Post-build steps for macOS
    # https://doc.qt.io/qt-6/macos-deployment.html

    set_target_properties(${EXE_NAME} PROPERTIES
        MACOSX_BUNDLE ON
        MACOSX_BUNDLE_INFO_PLIST cmake/MacOSXBundleInfo.plist.in
    )

    # Find macdeployqt
    get_target_property(QT_BIN_DIR Qt::qmake IMPORTED_LOCATION)
    find_program(MACDEPLOYQT NAMES macdeployqt HINTS "${QT_BIN_DIR}")

    # Use macdeployqt to bundle Qt libraries
    add_custom_command(TARGET ${EXE_NAME} POST_BUILD
        COMMAND ${MACDEPLOYQT}
        "$<TARGET_BUNDLE_DIR:${EXE_NAME}>"
        -verbose=1
        -always-overwrite
        -codesign=-
        -no-strip
        "$<IF:$<CONFIG:Release>,-dmg,-use-debug-libs>"
        COMMENT "Bundling Qt libraries"
    )

endif()
